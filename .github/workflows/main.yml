name: Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"
  CARGO_TERM_COLOR: always
  DATABASE_URL: mysql://root:rootpassword@localhost/test_db
  ROCKET_DATABASES: "{recipe_db={url=\"mysql://root:rootpassword@localhost/test_db\"}}"
  ROCKET_LOG_LEVEL: "off"

jobs:   
  end-to-end:
    name: Test End-To-End
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_DATABASE: test_db
          MYSQL_ROOT_PASSWORD: rootpassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3


    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Setup Rust
      run: rustup toolchain install stable --profile minimal
      
    - name: Cache Rust Dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Use Sccache
      uses: mozilla-actions/sccache-action@v0.0.3
    
    - name: Migrate Database
      run: |
        cargo install sqlx-cli --features mysql
        sqlx database reset --source ./migrations/test
      working-directory: ./server
      
    - name: Tests (Server)
      run: cargo test -- --include-ignored
      working-directory: ./server

    - name: Setup PNPM
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Get PNPM store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - uses: actions/cache@v3
      name: Setup pnpm cache
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
      
    - name: Install Dependencies (Client)
      run: pnpm install
      working-directory: ./client
      
    - name: Cypress (E2E)
      uses: cypress-io/github-action@v5
      with:
        wait-on: 'http://127.0.0.1:8000'
        start: |
          npm run server
          npm run client -- --logLevel=silent
          
    - name: Compile (Client)
      run: npm run check
      working-directory: ./client
